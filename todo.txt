- bug#47: BoardSpaceUnit cleanups; more things should be explicit and
  consistent about what space a value is defined in.

- bug#45: when starting the first game, the first attempt to pan on the
  unit-placement screen fails but subsequent ones succeed... dat's bad.

- bug#44: when placing entities on spawn points, we should have better feedback
  when 'Done' is clickable. We brighten it a bit on hover-and-valid but there's
  no indication before hovering.

- bug#43: We can lose decent file+line attribution of failing tests when a
  gametest.RunDrawingTest fails. The reason seems to be that Convey generates
  attribution by looking for a ".*_test[s].go$" pattern in filenames on the
  stack according to a runtime.Callers call. This is broken for us because the
  call to convey.So happens on a purpose-built goroutine that doesn't have the
  gametest's client-test on the stack __AND__ draw_ui.go doesn't have a
  matching _test.go suffix. We're kinda stuck because we need draw_ui.go to be
  used from arbitrary test-packages so we can't just move it to a
  draw_ui_test.go file T_T.

  The real solution is probably to submit a bug report with Convey; they should
  support attribution based on the current Convey context instead of just on
  the current-call-stack.

  For now, we can rely on the rejection file name to point us in the right
  direction.

- bug#42: hitting 'back' on the side-select screen for lvl1 starts the game T_T

- bug#40: during some refactoring, we had to add a bunch of extra calls to
  Convey("--stubbed-context--", func() {...}). We should use a cleaner way like
  supporting convey/not-convey in the testbuilder api.

- bug#38: reaching into the GamePanel and resetting the AnchorBox field is
  barftastic; need to have GamePanel API that encapsualtes the work.

- bug#37: verify/test that a 'game_key' is enough to join an online
  game-in-progress; also think about improving APIs to not control-couple to
  'is game_key empty?'.

- bug#36: inject a render.RenderQueueInterface dependency to
  game.MakeGamePanel. Then, we can pass that reference in to
  'makeGameTheWrongWay' so it doesn't have to look at a global.

- bug#35: game/ui_versus.go has a function, InsertVersusMenu, that isn't called
  (except in tests). It seems to add a "what kind of versus game?" step to the
  flow. See data/ui/start/versus/meta.json for a 'Chooser' layout that seems to
  have been planned. We should think about what the flow in the UI should be
  and incorporate this step if we want. For now, just tagging this dead code as
  something we might want to keep.

- bug#34: generic cleanup things; removing commented code, dropping unneeded
  logging, etc.

- bug#33: for the commit b9e73874a4bc36da7ef0435c797f737abab4b3e1 we're seeing
  strange behaviour. The commit introduces a test that clicks some UI through,
  what was then, new test harness code. The clicks seem to work except on
  nexus.

- bug#30: while trying to load the intruders tutorial, we panicked in some
  sprite things; need to investigate

- bug#29: the way house viewer was zooming didn't seem correct; need to figure
  out what it should be in main.go. Also, how do we zoom when running the game?
  Does it work?

- bug#28: texture package has package-level state to reference a Manager
  instance. Leads to data-races when running multiple tests that want to
  texture.Init() over separate render queues.

- bug#26: LuaStringifyParam is stubbed and leading to useless debug output

- bug#24: game/script.go:loadgameStateRaw reaches into the GamePanel to set a
  'Game' pointer; it should just load the state and let calling code make Game
  objects if needed, I'd think

- bug#22: editing key_binds.json can cause panics; e.g. remove 'screenshot'
  from the mapping in the .json file and main.go will panic

- bug#21: sometimes (don't know why yet) the window doesn't get focus when
  starting

- bug#20: add better feedback for TextureManager.BlockUntilLoaded failures
	- include the set of textures waited on
	- include how long it took to successfully load the textures that _did_ load

- bug#18: the buttons in game/ui_button.go invoke their "on-click" in Respond
  _and_ in "handleClick" ... it should really only be one or the
  other!

- bug#17: we're doing something weird with key binds in base/bindings.go. We
  should make sure that we support modifiers on compound derived-keys.

- bug#16: `rand.Seed(100)` in main.go is there for testing (we want the same
  sequence of random nums for reproducibility) but that form of seeding is bad;
  it couples to package-level state and should be replaced with
  `rng := rand.New(rand.NewSource(100))` and then pipe `rng` everywhere but I
  can't be bothered right now.

- bug#15: glop has its own texture package/manager but there is another,
  similar-but-not-the-same, one in haunts. We should DRY it out.

- bug#14: naming in door.go seems weird. It might be that 'floor' things are
  _actually_ referring to drawing operations that will affect the look of the
  floor, but I kinda doubt it.

- bug#13: improve base.registry APIs;
	- lots of reflection was needed b/c of a lack of generics back in the day
	- there seems to be the start of a "use this initializer hook" with the
	  "autoload" tag but there doesn't seem to be any real use of it? Perhaps
	  redesign how/where/if a constructor runs when loading the object.

- bug#12: improve APIs so that we don't have to _remember_ to call SetupGLStuff
  everywhere.

- bug#10: tests that need to be skipped for now can be tagged with this bug.
  That way, we can easily find them and disable higher-level tests when we need
  to re-focus.

- console is getting input even when it's not open

- bug#39: edit screen is showing a furniture editor by default
	- we should expect a list of furniture down the RHS
	- r.n., some furniture (or some other text-line, tbh) has a name
	  'data' which seems wrong? see house/furniture_tab.go

- bug#8: house.MakeLosTexture should either always get called on a render
  thread or never get called on a render thread. If we refactor game/los.go's
  alloc() to farm out the call to a render thread, we can remove the
  queue-from-within in house.MakeLosTexture, then always call the whole
  function on a render thread.

- bug#6: The 'edit mode' screen can really lag out; afterwards, switching back
  to the startup screen seems to break
	- we need to profile and optimize it
	- blockage in drivers? __driDriverGetExtensions_d3d12 seems like the culprit
	  ; best guess is that it's building a string describing all the GL
	  extensions that the wslg d3d12 'gallium' driver supports. Rebuilding every
	  time most likely T_T
	- note: running `glxgears` while running `haunts` can cause `glxgears` to
	  stop rendering properly once `haunts` hits the hitch
		- this could indicate that something in WSL is crashing (maybe XWayland?)

- bug#1: The 'edit mode' screen doesn't render its text correctly

- verify licenses
	- see test/licenses

- Do we need to worry about building in devel mode?
	- build-tag: // +build !release

- bug#3: The console doesn't look right

- bug#4: Can get locked up by repeatedly opening/closing the same door.
	- needs repro
- bug#5: Can have a door not connected to a room.
	- needs repro

- bug#48: <next>
